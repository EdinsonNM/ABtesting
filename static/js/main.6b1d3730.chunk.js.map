{"version":3,"sources":["logo.svg","components/page1.js","components/page2.js","components/page3.js","components/pag1b.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Page1","useEffect","window","ga","document","location","pathname","search","react_default","a","createElement","react_router_dom","to","Page2","params","URLSearchParams","console","log","get","Page3","Page1B","createBrowserHistory","listen","App","className","src","logo","alt","forceRefresh","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gPCGzB,SAASC,IAIvB,OAHAC,oBAAU,WACTC,OAAOC,GAAG,MAAO,OAAQC,SAASC,SAASC,SAAWF,SAASC,SAASE,SACtE,IAEFC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,UAAT,YCPa,SAASC,IACvB,IAAIC,EAAS,IAAIC,gBAAgBX,SAASC,SAASE,QAKnD,OAJAS,QAAQC,IAAIH,EAAOI,IAAI,OACvBjB,oBAAU,WACTC,OAAOC,GAAG,MAAO,OAAQC,SAASC,SAASC,SAAWF,SAASC,SAASE,SACtE,IAEFC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,UAAT,aAAkCJ,EAAAC,EAAAC,cAAA,YCVtB,SAASS,IAIvB,OAHAlB,oBAAU,WACTC,OAAOC,GAAG,MAAO,OAAQC,SAASC,SAASC,SAAWF,SAASC,SAASE,SACtE,IAEFC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,qBCLY,SAASU,IAIvB,OAHAnB,oBAAU,WACTC,OAAOC,GAAG,MAAO,OAAQC,SAASC,SAASC,SAAWF,SAASC,SAASE,SACtE,IAEFC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,UAAT,YCCYS,cAENC,OAAO,SAAUjB,GACvBW,QAAQC,IAAI,kBACZf,OAAOC,GAAG,MAAO,OAAQE,EAASC,SAAWD,EAASE,QACtDL,OAAOC,GAAG,OAAQ,cAiCLoB,MA/Bf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,UAAQc,UAAU,cAChBhB,EAAAC,EAAAC,cAAA,OAAKe,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCnB,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQiB,cAAY,GAClBpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,SAAT,WAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,UAAT,YAIJJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWhC,IACtCQ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWZ,IACxCZ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWnB,IAChCL,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWb,SC7BxBc,QACW,cAA7B/B,OAAOG,SAAS6B,UAEe,UAA7BhC,OAAOG,SAAS6B,UAEhBhC,OAAOG,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6b1d3730.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect} from 'react'\nimport { Link } from \"react-router-dom\";\n\nexport default function Page1() {\n\tuseEffect(() => {\n\t\twindow.ga('set', 'page', document.location.pathname + document.location.search);\t\n\t}, [])\n\treturn (\n\t\t<div>\n\t\t<h1>PAGE 1</h1>\n\t\t<Link to='/page2'>next...</Link>\n\t\t</div>\n\t)\n}\n","import React, {useEffect} from 'react'\nimport { Link } from \"react-router-dom\";\n\nexport default function Page2() {\n\tvar params = new URLSearchParams(document.location.search);\n\tconsole.log(params.get('id'))\n\tuseEffect(() => {\n\t\twindow.ga('set', 'page', document.location.pathname + document.location.search);\t\n\t}, [])\n\treturn (\n\t\t<div>\n\t\t\t<h1>PAGE 2</h1>\n\t\t\t<Link to='/page3'>next A...</Link><br/>\n\t\t</div>\n\t)\n}\n","import React, {useEffect} from 'react'\n\nexport default function Page3() {\n\tuseEffect(() => {\n\t\twindow.ga('set', 'page', document.location.pathname + document.location.search);\n\t}, [])\n\treturn (\n\t\t<div>\n\t\t\t<h1>PAGE 3</h1>\n\t\t</div>\n\t)\n}\n","import React, {useEffect} from 'react'\nimport { Link } from \"react-router-dom\";\n\nexport default function Page1B() {\n\tuseEffect(() => {\n\t\twindow.ga('set', 'page', document.location.pathname + document.location.search);\t\n\t}, [])\n\treturn (\n\t\t<div>\n\t\t<h1>PAGE 1 B</h1>\n\t\t<Link to='/page2'>next...</Link>\n\t\t</div>\n\t)\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Page1 from './components/page1';\nimport Page2 from './components/page2';\nimport Page3 from './components/page3';\nimport Page1B from './components/pag1b';\n\nvar history = createBrowserHistory();\n\nhistory.listen(function (location) {\n  console.log('change history')\n  window.ga('set', 'page', location.pathname + location.search);\n  window.ga('send', 'pageview');\n});\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Router forceRefresh>\n          <div>\n            <ul>\n              <li>\n                <Link to=\"page2\">Page 2</Link>\n              </li>\n              <li>\n                <Link to=\"/page3\">Page 3</Link> \n              </li>\n            </ul>\n\n            <hr />\n            <Route exact path=\"/page1\" component={Page1} />\n            <Route exact path=\"/page1-b\" component={Page1B} />\n            <Route path=\"/page2\" component={Page2} />\n            <Route path=\"/page3\" component={Page3} />\n          </div>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}